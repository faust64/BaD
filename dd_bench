#!/bin/sh

CLEANUP_TMPFS=false
SETUP=false

test -z "$LOG_PATH" && LOG_PATH=/var/tmp/BaD
test -z "$TARGET_PATH" && TARGET_PATH=/home/bench
while test "$1"
do
    case "$1" in
	-s|--setup) SETUP=true ;;
	-l|--logpath) LOG_PATH="$2"; shift ;;
	-d|--targetdir) TARGET_PATH="$2"; shift ;;
	-i|--fastinput) FAST_INPUT="$2"; shift ;;
	-h|--help) cat <<EOF
$0 usage:
  $0 [-l /logs] |-d /test/dir ] [ -e /dev/block ] [ -i /dev/zero ] [ -r 1..n ]
EOF
	    exit 0
	    ;;
	*) echo discarding unrecognized option "$1" ;;
    esac
    shift
done

if ! test `id -u` = 0; then
    echo must run as root >&2
    exit 1
fi
test -d "$TARGET_PATH" || mkdir -p "$TARGET_PATH" 2>/dev/null
test -d "$LOG_PATH" || mkdir -p "$LOG_PATH" 2>/dev/null

if $SETUP; then
    if test -x /bin/yum -o -x /usr/bin/yum; then
	if ! yum -y install ioping; then
	    echo failed installing fio, sysstat or ioping >&2
	    echo in doubt, try installing epel-release >&2
	    exit 1
	fi
    elif test -x /usr/bin/apt-get -o -x /bin/apt-get; then
	if ! DEBIAN_FRONTEND=noninteractive apt-get install -y ioping; then
	    echo failed installing fio, sysstat or ioping >&2
	    exit 1
	fi
    else
	echo unsupported platform
	exit 1
    fi
    exit 0
elif ! test -d "$TARGET_PATH" -a -d "$LOG_PATH"; then
    echo "missing paths" >&2
    exit 1
elif test -z "$FAST_INPUT"; then
    echo trying to allocate 7000M of RAM mounting tmpfs
    if mkdir -p /var/tmp/fast; then
	if mount tmpfs -t tmpfs /var/tmp/fast -o size=7000M; then
	    if dd if=/dev/urandom of=/var/tmp/fast/sample bs=1M count=6543; then
		FAST_INPUT=/var/tmp/fast/sample
	    else
		echo failed generating fast input sample >&2
	    fi
	    CLEANUP_TMPFS=true
	else
	    echo failed mounting tmpfs serving tests with a fast and non-sequential input >&2
	fi
    else
	echo failed creating fast input directory >&2
    fi
    if test -z "$FAST_INPUT"; then
	echo falling back to /dev/zero, beware of predictibility/compressions/...
	export FAST_INPUT=/dev/zero
    fi
fi
CORE_COUNT=`awk 'BEGIN{c=0}/^[Pp]rocessor[ \t]/{c=c+1}END{print c;}' /proc/cpuinfo`
MAX_THREADS=`expr $CORE_COUNT '*' 2 + 2`

cleanup()
{
    for child in TOP IOPING IOSTAT IOSTAT VMSTAT SAR1 SAR2
    do
	eval childprocess=\$${child}_PID
	if test "$childprocess"; then
	    echo "shutting down $child: $childprocess"
	    ( kill $childprocess || kill -9 $childprocess ) >/dev/null 2>&1
	fi
    done
    if $CLEANUP_TMPFS; then
	umount /var/tmp/fast
    fi
}

trap cleanup EXIT

top -bHd 10 >"$LOG_PATH"/top-bHd 2>&1 &
TOP_PID=$!
iostat -Ntkdx 10 >"$LOG_PATH"/iostat-Ntkdx 2>&1 &
IOSTAT_PID=$!
vmstat -t 10 >"$LOG_PATH"/vmstat 2>&1 &
VMSTAT_PID=$!
sar -n DEV 10 >"$LOG_PATH"/sar-n 2>&1 &
SAR1_PID=$!
sar -B 10 >/tmp/sar-B 2>&1 &
SAR2_PID=$!
ioping "$TARGET_PATH" >"$LOG_PATH"/ioping 2>&1 &
IOPING_PID=$!

TARGET_FILE="$TARGET_PATH"/idontdoblock
dd if="$FAST_INPUT" of="$TARGET_FILE" bs=1G count=1
for i in 2 3 4 5
do
   dd if="$FAST_INPUT" of="$TARGET_FILE" bs=1G count=1 oflag=append conv=notrunc
done

for blocksize in 128 1023 8k 4M 32M 1G
do
    mkdir -p "$LOG_PATH/read/$blocksize" "$LOG_PATH/write/fdatasync/$blocksize" "$LOG_PATH/write/direct/$blocksize"
    case "$blocksize" in
	*M)	limit=512 ;	rotate=160	;;
	*G)	limit=64 ;	rotate=5	;;
	*)	limit=65536 ;	rotate=65535	;;
    esac
    cpt=0
    while test "$cpt" -lt $limit
    do
	if ! dd "if=$TARGET_FILE" of=/dev/null bs=$blocksize count=1 skip=`expr $cpt % $rotate` iflag=fullblock >"$LOG_PATH"/read/$blocksize/dd-read-block-bs${blocksize}-count1-fullblock$cpt 2>&1; then
	    sync ; echo 3 >/proc/sys/vm/drop_caches
	    echo "read bench sz=$blocksize aborted due to dd exit code" >&2
	    break
	fi
	cpt=`expr $cpt + 1`
	sync ; echo 3 >/proc/sys/vm/drop_caches
    done
    for woption in direct fdatasync
    do
	cpt=0
	while test "$cpt" -lt $limit
	do
	    test "$woption" = direct && ddopt="oflag=direct" || ddopt=conv=fdatasync
	    if ! dd "if=$FAST_INPUT" of="$TARGET_PATH/dd-out" bs=$blocksize count=1 skip=`expr $cpt % $rotate` $ddopt >"$LOG_PATH"/write/$woption/$blocksize/dd-write-block-bs$blocksize-count1-fdatasync$cpt 2>&1; then
		sync ; echo 3 >/proc/sys/vm/drop_caches
		echo "write bench opt=$woption sz=$blocksize aborted due to dd exit code" >&2
		break
	    fi
	    cpt=`expr $cpt + 1`
	    sync ; echo 3 >/proc/sys/vm/drop_caches
	done
    done
done
rm -f "$TARGET_PATH"/dd-out

ps axww | grep -E '(iotop|ioping|vmstat|sar|iostat|top) '
exit 0
